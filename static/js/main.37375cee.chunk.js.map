{"version":3,"sources":["Components/Movie.js","Components/AddMovieModal.js","Components/Dashboard.js","App.js","serviceWorker.js","Store/Reducer.js","index.js"],"names":["Movie","state","Title","_this","props","Year","Genre","Runtime","Director","Poster","TitleInput","YearInput","RuntimeInput","GenreInput","DirectorInput","PosterInput","editDisplay","onChangeHandler","event","setState","Object","defineProperty","target","id","value","saveHandler","NewTitle","NewYear","NewGenre","NewRuntime","NewDirector","console","log","cancelHandler","display","opacity","_this$props","this","remove","react_default","a","createElement","className","style","type","onChange","onClick","split","map","item","index","key","backgroundImage","concat","backgroundSize","backgroundPosition","Component","AddMovie","imdbID","list","TitleError","RuntimeError","YearError","MovieError","addMovieHandler","strOrganize","str","i","length","isNaN","toUpperCase","slice","toLowerCase","join","replace","YearErr","RuntimeErr","moviesList","movies","MovieErr","Number","push","addMovie","YearErrorDisplay","RuntimeErrorDisplay","MovieErrorDisplay","addMovieDisplay","connect","dispatch","Dashboard","removeHandler","filter","movie","removeMovie","fetchAllMoviesData","initialMoviesDetails","axios","get","data","Search","isLoaded","movieDetails","_this2","AddMovieModal","Components_Movie","App","src_Components_Dashboard","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","undefined","action","objectSpread","err","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37375cee.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Dashboard.css'\r\n\r\n\r\n\r\nclass Movie extends Component{   \r\n    state = {   \r\n        Title: this.props.Title,\r\n        Year: this.props.Year,\r\n        Genre: this.props.Genre,\r\n        Runtime: this.props.Runtime,\r\n        Director: this.props.Director,\r\n        Poster: this.props.Poster,\r\n        TitleInput: '',\r\n        YearInput: '',\r\n        RuntimeInput: '',\r\n        GenreInput: '',\r\n        DirectorInput: '',\r\n        PosterInput: '',\r\n        editDisplay: false\r\n\r\n\r\n    }\r\n\r\n    onChangeHandler = (event) =>{   \r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n    saveHandler = () =>{  \r\n        let NewTitle = this.state.Title\r\n        let NewYear = this.state.Year\r\n        let NewGenre = this.state.Genre\r\n        let NewRuntime = this.state.Runtime\r\n        let NewDirector = this.state.Director\r\n        let editDisplay = this.state.editDisplay\r\n        this.setState({\r\n            Title: NewTitle,\r\n            Year: NewYear,\r\n            Genre: NewGenre,\r\n            Runtime: NewRuntime,\r\n            Director: NewDirector,\r\n            editDisplay: !editDisplay\r\n        })\r\n        console.log(this.state)\r\n    }\r\n\r\n    cancelHandler = () =>{  \r\n        let Title = this.props.Title\r\n        let Year = this.props.Year\r\n        let Genre = this.props.Genre\r\n        let Runtime = this.props.Runtime\r\n        let Director = this.props.Director\r\n        let editDisplay = this.state.editDisplay\r\n        this.setState({\r\n            Title: Title,\r\n            Year: Year,\r\n            Genre: Genre,\r\n            Runtime: Runtime,\r\n            Director: Director,\r\n            editDisplay: !editDisplay\r\n        })\r\n        console.log(this.state)\r\n    }\r\n\r\n    editDisplay = () =>{    \r\n        let editDisplay= this.state.editDisplay\r\n        this.setState({ \r\n            editDisplay: !editDisplay\r\n        })\r\n    }\r\n\r\n    render(){   \r\n        const {id, remove} = this.props\r\n        let display \r\n        let opacity\r\n        if(this.state.editDisplay===false){ \r\n            display = 'none';\r\n            opacity = 0;\r\n        }\r\n        return( \r\n          <div>\r\n          <div className='Movie'  >   \r\n              <div className='Fade'> \r\n\r\n              <div className='EditContainer' style={{display: display, opacity: opacity}}> \r\n\r\n              <div className='EditFormModal'> \r\n                        <div>   \r\n                            Title: <input type='text' id='Title' onChange={this.onChangeHandler} value={this.state.Title}/>\r\n                        </div>\r\n                        <div>   \r\n                            Year: <input type='text' id='Year' onChange={this.onChangeHandler}  value={this.state.Year}/>\r\n                        </div>\r\n                        <div>   \r\n                            Genre: <input type='text' id='Genre'  onChange={this.onChangeHandler}  value={this.state.Genre}/>\r\n                        </div>\r\n                        <div>   \r\n                            Runtime: <input type='text' id='Runtime'  onChange={this.onChangeHandler}  value={this.state.Runtime}/>\r\n                        </div>\r\n                        <div>   \r\n                            Director: <input type='text' id='Director' onChange={this.onChangeHandler}  value={this.state.Director}/>\r\n                        </div>\r\n                        <div>   \r\n                            Poster: <input type='text' id='Poster' onChange={this.onChangeHandler}  value={this.state.Poster}/>\r\n                        </div>\r\n                        <div className='EditButtons'>   \r\n                        <div className='SaveButton'>   \r\n                             <button onClick={this.saveHandler}>SAVE</button>\r\n                        </div>\r\n                        <div className='CancelButton'>   \r\n                             <button onClick={this.cancelHandler}>CANCEL</button>\r\n                        </div>\r\n                        </div>\r\n\r\n                 </div>\r\n              </div>\r\n\r\n                      <div className='Header'>\r\n                      <div className='TitleContainer'>   \r\n                          <div className='Title'>{this.state.Title}({this.state.Year})</div>\r\n                              <div className='MovieGenre'>\r\n                                  <ul>    \r\n                                      {this.state.Genre&&this.state.Genre.split(',').map((item,index) =>{   \r\n                                          return( \r\n                                              <li key={index}>{item}</li>\r\n                                          )\r\n                                      })}\r\n                                  </ul>\r\n  \r\n                              </div>\r\n                              <div className='Rest'>  \r\n                               <ul>\r\n                                   <li>Runtime: {this.state.Runtime}</li>    \r\n                                   <li>Director: {this.state.Director}</li>    \r\n                                   <li>Id: {id}</li>    \r\n                                   </ul> \r\n                               </div>\r\n                               <div className='Buttons'>  \r\n                                  <div className='Edit'><button onClick={this.editDisplay}>EDIT</button></div>\r\n                                  <div className='Remove'><button onClick={() => remove(id)}>REMOVE</button></div>\r\n                               </div>\r\n                          </div>   \r\n                          <div className='Poster' style={{backgroundImage: `url(${this.state.Poster})`, backgroundSize: 'cover', backgroundPosition:'center'}}></div>\r\n                      </div>\r\n               </div>\r\n          </div>\r\n\r\n      </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react'\r\nimport './Dashboard.css'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nclass AddMovie extends Component{   \r\n    state = {   \r\n        Title:'',\r\n        Year:'',\r\n        Genre: '',\r\n        Runtime: '',\r\n        Director: '',\r\n        Poster: '',\r\n        imdbID: 0,\r\n        list: [],\r\n        TitleError: false,\r\n        RuntimeError: false,\r\n        YearError: false,\r\n        MovieError: false\r\n        \r\n    }\r\n\r\n    onChangeHandler = (event) => {  \r\n        this.setState({ \r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n    addMovieHandler= () =>{  \r\n        function strOrganize(str){ \r\n            str= str.split(' ')\r\n            for(let i=0; i<str.length; i++){  \r\n                if(isNaN(str[i])){   \r\n                    str[i] = str[i][0].toUpperCase() + str[i].slice(1).toLowerCase()\r\n                }\r\n            }\r\n            return str.join(' ')\r\n        }\r\n\r\n            let Title = this.state.Title\r\n            Title = Title.replace(/[!@#$%^&*-><=,)(}{.'`~;_+|\\\\]/g, \"\");\r\n            let Year = this.state.Year\r\n            let Genre = this.state.Genre\r\n            let Runtime= this.state.Runtime \r\n            let Director = this.state.Director\r\n            let Poster= this.state.Poster\r\n            let YearErr= false\r\n            let RuntimeErr=false\r\n            let moviesList = this.props.movies\r\n            let MovieErr = false\r\n            for(let i =0; i<moviesList.length; i++){  \r\n                if(moviesList[i].Title===Title){   \r\n                    MovieErr=true \r\n                    break\r\n                }\r\n            }\r\n            if(Year === '' ||  isNaN(Year)!==false || Number(Year)<1900 || Number(Year)>2019){\r\n                YearErr=true\r\n            }\r\n            if(Runtime === '' ||  isNaN(Runtime)!==false || Number(Runtime)<0 || Number(Runtime)>500){\r\n                RuntimeErr = true\r\n            }\r\n\r\n            this.setState({ \r\n                YearError: YearErr,\r\n                RuntimeError: RuntimeErr,\r\n                MovieError: MovieErr\r\n\r\n            })\r\n            if(Title&&Year&&Genre&&Director&&Poster !== '' &&YearErr!==true &&RuntimeErr!==true && Year>1900&&Year<2019 && Runtime>0&&Runtime<500 &&MovieErr===false){ \r\n            Title= strOrganize(Title)\r\n\r\n            \r\n            Runtime= this.state.Runtime + ' min' \r\n            Director = strOrganize(Director)\r\n            let imdbID = this.state.imdbID+1\r\n            let list = this.props.movies\r\n            list.push({Title, Year, Genre, Runtime, Director, Poster, imdbID})\r\n            this.props.addMovie(list)\r\n            this.setState({ \r\n                Title:'',\r\n                Year:'',\r\n                Genre: '',\r\n                Runtime: '',\r\n                Director: '',\r\n                Poster: '',\r\n                list: list,\r\n                imdbID: imdbID\r\n            })\r\n        }else{  \r\n            return null\r\n        }\r\n\r\n    }\r\n    \r\nrender(){   \r\n\r\n    let display;\r\n    let YearErrorDisplay;\r\n    let RuntimeErrorDisplay;\r\n    let MovieErrorDisplay;\r\n\r\n    if(this.props.addMovieDisplay===false){    \r\n        display= 'none'\r\n    }\r\n    if(this.state.RuntimeError === false){ \r\n        RuntimeErrorDisplay='none'\r\n\r\n    }\r\n    if(this.state.YearError === false){ \r\n        YearErrorDisplay= 'none'\r\n\r\n    }\r\n    if(this.state.MovieError === false){ \r\n       MovieErrorDisplay= 'none'\r\n\r\n    }\r\n    \r\n    return( \r\n        <div >  \r\n            <div  style={{display: display}}>\r\n                 <div className='AddMovieModal'>   \r\n                            <div>   \r\n                                <div>Title</div>\r\n                                <input type='text' id='Title' onChange={this.onChangeHandler} value={this.state.Title}/>\r\n                                <div className='Error' style={{display: MovieErrorDisplay}}>Movie is already exists</div>\r\n                            </div>\r\n                            <div>   \r\n                                <div>Year</div>\r\n                                <input type='text' id='Year' onChange={this.onChangeHandler}  value={this.state.Year}/>\r\n                                <div className='Error' style={{display: YearErrorDisplay}}>Number between 1900-2019</div>\r\n                            </div>\r\n                            <div>   \r\n                                <div>Genre</div>\r\n                                <input type='text' id='Genre'  onChange={this.onChangeHandler}  value={this.state.Genre}/>\r\n                            </div>\r\n                            <div>   \r\n                                <div>Runtime</div>\r\n                                <input type='text' id='Runtime'  onChange={this.onChangeHandler}  value={this.state.Runtime}/>\r\n                                <div className='Error' style={{display: RuntimeErrorDisplay}}>Number between 0-500</div>\r\n                            </div>\r\n                            <div>   \r\n                                <div>Director</div>\r\n                                <input type='text' id='Director' onChange={this.onChangeHandler}  value={this.state.Director}/>\r\n                            </div>\r\n                            <div>   \r\n                                <div>Poster</div>\r\n                                <input type='text' id='Poster' onChange={this.onChangeHandler}  value={this.state.Poster}/>\r\n                            </div>\r\n                            </div>\r\n                            <div>\r\n                                <div className='AddMovieModalButton' onClick={this.props.onClick}>   \r\n                                <button onClick={this.addMovieHandler}>ADD</button>\r\n                            </div>\r\n                    </div>\r\n                </div> \r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nconst mapStateToProps = (state) =>{ \r\n    return{ \r\n        movies: state.movies\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{   \r\n    return{ \r\n        addMovie: (list) => dispatch({type: 'ADD_MOVIE', list: list}),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMovie)","import React, { Component } from 'react'\r\nimport Movie from './Movie'\r\nimport './Dashboard.css'\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\nimport AddMovie from './AddMovieModal'\r\n\r\nclass Dashboard extends Component{   \r\n    state = {   \r\n        addMovieDisplay: false\r\n        \r\n    }\r\n\r\n    componentDidMount(){ \r\n        this.fetchAllMoviesData();\r\n    }\r\n\r\n    async fetchAllMoviesData () {\r\n        let list = [];\r\n        let initialMoviesDetails=[]\r\n        try {\r\n            const movies = await axios.get(`http://www.omdbapi.com/?apikey=1d80d066&s=turtle`);\r\n            initialMoviesDetails = movies.data.Search;\r\n        } catch (err) {\r\n            this.setState({isLoaded: false});\r\n        }\r\n        for(let i = 0; i < initialMoviesDetails.length; i++) {\r\n            try{\r\n                const movieDetails = await axios.get(`http://www.omdbapi.com/?apikey=1d80d066&i=${initialMoviesDetails[i].imdbID}`)\r\n                list.push(movieDetails.data);\r\n            } catch (err) {\r\n                console.log(initialMoviesDetails[i].Title,'has failed')\r\n            }\r\n\r\n        }\r\n        this.setState({\r\n            list: list, \r\n            isLoaded: true});\r\n        this.props.addMovie(list)\r\n    }\r\n\r\n    onChangeHandler = (event) => {  \r\n        this.setState({ \r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n    addMovieHandler= () =>{  \r\n            let list = this.props.movies\r\n            this.setState({ \r\n                list: list\r\n            })\r\n    }\r\n\r\n    removeHandler = (key) => { \r\n        let list = this.props.movies.filter((movie) => {   \r\n            return key !== movie.imdbID\r\n        })\r\n    this.props.removeMovie(list)\r\n    }\r\n\r\n    addMovieDisplay = ()=>{ \r\n        let addMovieDisplay = this.state.addMovieDisplay\r\n        this.setState({\r\n            addMovieDisplay: !addMovieDisplay\r\n        })\r\n    }\r\n\r\n    render(){   \r\n        console.log(this.state)\r\n        let {isLoaded} = this.state;\r\n        const movies = this.props.movies;\r\n        if(!isLoaded){    \r\n            return( \r\n                    <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n                \r\n            )\r\n        }else{ \r\n\r\n        return( \r\n            <div className='Container'>            \r\n            <div className='MainTitle'>   \r\n                Herolo-Cinema\r\n            </div>\r\n            <div className='SubTitle'>   \r\n                Try, Stay.\r\n            </div>\r\n            <div className='AddNewMovieButton'>   \r\n                <button onClick={this.addMovieDisplay}>Add New Movie</button>\r\n            </div>\r\n            <div className='AddMovieModal'>  \r\n            <AddMovie\r\n            onClick={this.addMovieHandler}\r\n            addMovieDisplay={this.state.addMovieDisplay}\r\n            /> \r\n                </div> \r\n            <div className='MoviesContainer'>   \r\n                <ul>    \r\n                    {movies && movies.map((movie) =>{  \r\n                        return (    \r\n                            <li key={movie.imdbID}>\r\n                                <Movie  \r\n                                Title={movie.Title}\r\n                                Genre={movie.Genre}\r\n                                Runtime={movie.Runtime}\r\n                                Director={movie.Director}\r\n                                Poster={movie.Poster}\r\n                                Year={movie.Year}\r\n                                remove={this.removeHandler}\r\n                                id={movie.imdbID}\r\n                                />\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            </div>\r\n        )\r\n            }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{ \r\n    return{ \r\n        movies: state.movies\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{   \r\n    return{ \r\n        addMovie: (list) => dispatch({type: 'ADD_MOVIE', list: list}),\r\n        removeMovie: (list) => {dispatch({type: 'REMOVE_MOVIE', list: list})}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard)","import React, { Component } from 'react';\nimport Dashboard from './Components/Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Dashboard/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {  \r\n    movies:[]\r\n} \r\n\r\nconst rootReducer = (state = initialState, action) =>{    \r\n    switch(action.type){    \r\n        case 'ADD_MOVIE':\r\n        return{ \r\n            ...state,\r\n            movies: action.list\r\n        }\r\n        case 'ADD_MOVIE_ERROR':\r\n        console.log('add_movie_error', action.err)\r\n        return state;\r\n        case 'REMOVE_MOVIE':\r\n        return{ \r\n            ...state,\r\n            movies: action.list\r\n        }\r\n        case 'REMOVE_MOVIE_ERROR':\r\n        console.log('remove_movie_error', action.err)\r\n        return state;\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './Store/Reducer'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}